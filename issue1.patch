diff --git a/frontend/src/components/VMediaInfo/VMediaTags.vue b/frontend/src/components/VMediaInfo/VMediaTags.vue
index def4e95e3..fe6c80dba 100644
--- a/frontend/src/components/VMediaInfo/VMediaTags.vue
+++ b/frontend/src/components/VMediaInfo/VMediaTags.vue
@@ -5,7 +5,7 @@
       :key="index"
       :href="localizedTagPath(tag)"
       :title="tag.name"
-    />
+    >{{tag.name}}</VTag>
   </ul>
   <ul v-else class="flex flex-wrap gap-2">
     <VMediaTag v-for="(tag, index) in tags" :key="index" tag="li">{{
diff --git a/frontend/src/components/VTag/VTag.vue b/frontend/src/components/VTag/VTag.vue
index d676f6e4b..9bd412629 100644
--- a/frontend/src/components/VTag/VTag.vue
+++ b/frontend/src/components/VTag/VTag.vue
@@ -4,8 +4,10 @@
     size="small"
     variant="filled-gray"
     class="label-bold"
-    :href="href"
-    >{{ title }}</VButton
+    v-bind ="$props"
+    v-on="$listeners"
+    aria-label="Tag"
+    ><slot></slot></VButton
   >
 </template>
 
diff --git a/frontend/test/unit/specs/components/VTag/v-tag.spec.js b/frontend/test/unit/specs/components/VTag/v-tag.spec.js
new file mode 100644
index 000000000..f6f0a6f62
--- /dev/null
+++ b/frontend/test/unit/specs/components/VTag/v-tag.spec.js
@@ -0,0 +1,51 @@
+import { screen } from "@testing-library/vue"
+
+import { render } from "~~/test/unit/test-utils/render"
+
+import VTag from "~/components/VTag/VTag.vue"
+
+
+describe("VTag", () => {
+  let props = null
+  let options = null
+
+  beforeEach(() => {
+    props = {}
+    options = { propsData: props }
+  })
+
+  it("should render an anchor tag by default", () => {
+    options.propsData = {
+        ...options.propsData,
+        title: "exTitle",
+        href: "https://example.com/",
+      }
+    const { container } = render(VTag, options)
+    expect(container.firstChild.tagName).toEqual("A")
+  })
+
+  it("should pass all props to VButton", () => {
+    options.propsData = {
+        ...options.propsData,
+        title: "exTitle",
+        href: "https://example.com/",
+      }
+    const { container } = render(VTag, options)
+    expect(container.firstChild.title).toEqual("exTitle")
+    expect(container.firstChild.href).toEqual("https://example.com/")
+  })
+
+  it("renders slot content", () => {
+    const label = "I'm a label"
+    options.propsData = {
+        href: "https://example.com/",
+        title: "Slot test",
+    }
+    options.slots = {
+      default: `<div aria-label="${label}">Hello</div>`,
+    }
+
+    render(VTag, options)
+    expect(screen.queryByLabelText(label)).toBeDefined()
+  })
+})
